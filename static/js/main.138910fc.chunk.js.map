{"version":3,"sources":["App.module.css","components/card-list/CardList.module.css","components/card-list/Card.module.css","components/card-list/SearchBox/SearchBox.module.css","components/card-list/SearchBox/Spinner/Spinner.module.css","components/card-list/Card.js","components/card-list/CardList.js","components/card-list/SearchBox/SearchBox.js","components/card-list/SearchBox/Spinner/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","classes","CardContainer","alt","src","unique","monster","name","email","cardList","console","log","CardList","map","idx","key","SearchBox","placeholder","handleChange","Search","type","onChange","Spinner","Loader","App","state","searchField","loading","e","setState","target","value","axios","res","this","data","filteredMonster","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,WAAW,sBAAsB,gBAAgB,2BAA2B,aAAa,wBAAwB,WAAW,wB,mBCArKD,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,cAAgB,8B,mBCAlCD,EAAOC,QAAU,CAAC,OAAS,4B,mBCA3BD,EAAOC,QAAU,CAAC,OAAS,wBAAwB,MAAQ,yB,yQCgB5CC,EAbF,SAAAC,GACX,OACE,yBAAKC,UAAWC,IAAQC,eACtB,yBACEC,IAAK,UACLC,IAAG,+BAA0BL,EAAMM,OAAhC,4BAEL,4BAAKN,EAAMO,QAAQC,MACnB,2BAAIR,EAAMO,QAAQE,SCITC,EAXE,SAAAV,GAEf,OADAW,QAAQC,IAAIZ,EAAMO,SAEhB,yBAAKN,UAAWC,IAAQW,UACrBb,EAAMO,QAAQO,KAAI,SAACP,EAASQ,GAAV,OACjB,kBAAC,EAAD,CAAMC,IAAKD,EAAKR,QAASA,EAASD,OAAQS,S,iBCInCE,EAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,2BACElB,UAAWC,IAAQkB,OACnBC,KAAK,SACLH,YAAaA,EACbI,SAAUH,K,iBCFDI,EAJC,WACd,OAAO,yBAAKtB,UAAWC,IAAQsB,QAAxB,eC4CMC,E,4MAtCbC,MAAQ,CACNnB,QAAS,GACToB,YAAa,GACbC,SAAS,G,EAQXT,aAAe,SAAAU,GACb,EAAKC,SAAS,CAAEH,YAAaE,EAAEE,OAAOC,S,yLANtCrB,QAAQC,IAAI,kB,SACMqB,IAAM,8C,OAAlBC,E,OACNC,KAAKL,SAAS,CAAEvB,QAAS2B,EAAIE,KAAMR,SAAS,I,qIAMpC,IAAD,EAC0BO,KAAKT,MAA9BnB,EADD,EACCA,QAASoB,EADV,EACUA,YACXU,EAAkB9B,EAAQ+B,QAAO,SAAA/B,GAAO,OAC5CA,EAAQC,KAAK+B,cAAcC,SAASb,EAAYY,kBAGlD,OADA5B,QAAQC,IAAIyB,EAAiB,UAE3B,yBAAKpC,UAAWC,IAAQuB,KACtB,+CACA,kBAAC,EAAD,CACEP,YAAY,iBACZC,aAAcgB,KAAKhB,eAGpBgB,KAAKT,MAAME,QACV,kBAAC,EAAD,MAEA,kBAACf,EAAD,CAAUN,QAAS8B,S,GAhCXI,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.138910fc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__kNi_S\",\"App-logo\":\"App_App-logo__QUCS8\",\"App-logo-spin\":\"App_App-logo-spin__CkRpa\",\"App-header\":\"App_App-header__1R8MM\",\"App-link\":\"App_App-link__3zeBI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardList\":\"CardList_CardList__10wJ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardContainer\":\"Card_CardContainer__3dzSy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Search\":\"SearchBox_Search__1j07l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__33JZr\",\"load2\":\"Spinner_load2__bjXLH\"};","import React from \"react\";\r\n\r\nimport classes from \"./Card.module.css\";\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className={classes.CardContainer}>\r\n      <img\r\n        alt={\"monster\"}\r\n        src={`https://robohash.org/${props.unique}?set=set2&size=180x180`}\r\n      />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport classes from \"./CardList.module.css\";\r\n\r\nimport Card from \"./Card\";\r\n\r\nconst cardList = props => {\r\n  console.log(props.monster);\r\n  return (\r\n    <div className={classes.CardList}>\r\n      {props.monster.map((monster, idx) => (\r\n        <Card key={idx} monster={monster} unique={idx} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default cardList;\r\n","import React from \"react\";\r\n\r\nimport classes from \"./SearchBox.module.css\";\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input\r\n      className={classes.Search}\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport classes from \"./Spinner.module.css\";\r\n\r\nconst Spinner = () => {\r\n  return <div className={classes.Loader}>Loading...</div>;\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport classes from \"./App.module.css\";\nimport axios from \"axios\";\n\nimport CardList from \"./components/card-list/CardList\";\nimport SearchBox from \"./components/card-list/SearchBox/SearchBox\";\nimport Spinner from \"./components/card-list/SearchBox/Spinner/Spinner\";\n\nclass App extends Component {\n  state = {\n    monster: [],\n    searchField: \"\",\n    loading: true,\n  };\n  async componentDidMount() {\n    console.log(\"componenentdid\");\n    const res = await axios(\"https://jsonplaceholder.typicode.com/users\");\n    this.setState({ monster: res.data, loading: false });\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n  render() {\n    const { monster, searchField } = this.state;\n    const filteredMonster = monster.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    console.log(filteredMonster, \"filter\");\n    return (\n      <div className={classes.App}>\n        <h1>Monster Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search Monster\"\n          handleChange={this.handleChange}\n        />\n\n        {this.state.loading ? (\n          <Spinner />\n        ) : (\n          <CardList monster={filteredMonster} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"," import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}